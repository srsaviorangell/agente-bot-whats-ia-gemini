"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.convert = convert;var _jsonMapperJson = _interopRequireDefault(require("json-mapper-json"));function _getRequireWildcardCache(e) {if ("function" != typeof WeakMap) return null;var r = new WeakMap(),t = new WeakMap();return (_getRequireWildcardCache = function (e) {return e ? t : r;})(e);}function _interopRequireWildcard(e, r) {if (!r && e && e.__esModule) return e;if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };var t = _getRequireWildcardCache(r);if (t && t.has(e)) return t.get(e);var n = { __proto__: null },a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];}return n.default = e, t && t.set(e, n), n;}

async function convert(prefix, data, event) {
  try {
    data.event = event || data.event;
    event = data.event.indexOf('message') >= 0 ? 'message' : data.event;

    const mappConfEvent = await config_event(prefix, event);
    const mappConfType = await config_type(prefix, event, data.type);

    Object.assign(mappConfEvent, mappConfType);

    // console.log('mappConfEvent', mappConfEvent);

    if (!mappConfEvent) return data;
    return await (0, _jsonMapperJson.default)(data, mappConfEvent);
  } catch (e) {
    return data;
  }
}

async function config_event(prefix, event) {
  try {
    const { default: mappConf } = await ((specifier) => new Promise((r) => r(specifier)).then((s) => _interopRequireWildcard(require(s))))(`./${prefix}${event}.js`);
    if (!mappConf) return undefined;
    return mappConf;
  } catch (e) {
    return undefined;
  }
}

async function config_type(prefix, event, type) {
  try {
    const { default: mappConf } = await ((specifier) => new Promise((r) => r(specifier)).then((s) => _interopRequireWildcard(require(s))))(
      `./${prefix}${event}-${type}.js`);

    if (!mappConf) return undefined;
    return mappConf;
  } catch (e) {
    return undefined;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfanNvbk1hcHBlckpzb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiY29udmVydCIsInByZWZpeCIsImRhdGEiLCJldmVudCIsImluZGV4T2YiLCJtYXBwQ29uZkV2ZW50IiwiY29uZmlnX2V2ZW50IiwibWFwcENvbmZUeXBlIiwiY29uZmlnX3R5cGUiLCJ0eXBlIiwiYXNzaWduIiwibWFwcGVyIiwibWFwcENvbmYiLCJzcGVjaWZpZXIiLCJQcm9taXNlIiwidGhlbiIsInMiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFwcGVyL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYXBwZXIgZnJvbSAnanNvbi1tYXBwZXItanNvbic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb252ZXJ0KHByZWZpeDogc3RyaW5nLCBkYXRhOiBhbnksIGV2ZW50PzogYW55KSB7XG4gIHRyeSB7XG4gICAgZGF0YS5ldmVudCA9IGV2ZW50IHx8IGRhdGEuZXZlbnQ7XG4gICAgZXZlbnQgPSBkYXRhLmV2ZW50LmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwID8gJ21lc3NhZ2UnIDogZGF0YS5ldmVudDtcblxuICAgIGNvbnN0IG1hcHBDb25mRXZlbnQgPSBhd2FpdCBjb25maWdfZXZlbnQocHJlZml4LCBldmVudCk7XG4gICAgY29uc3QgbWFwcENvbmZUeXBlID0gYXdhaXQgY29uZmlnX3R5cGUocHJlZml4LCBldmVudCwgZGF0YS50eXBlKTtcblxuICAgIE9iamVjdC5hc3NpZ24obWFwcENvbmZFdmVudCwgbWFwcENvbmZUeXBlKTtcblxuICAgIC8vIGNvbnNvbGUubG9nKCdtYXBwQ29uZkV2ZW50JywgbWFwcENvbmZFdmVudCk7XG5cbiAgICBpZiAoIW1hcHBDb25mRXZlbnQpIHJldHVybiBkYXRhO1xuICAgIHJldHVybiBhd2FpdCBtYXBwZXIoZGF0YSwgbWFwcENvbmZFdmVudCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjb25maWdfZXZlbnQocHJlZml4OiBhbnksIGV2ZW50OiBhbnkpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IGRlZmF1bHQ6IG1hcHBDb25mIH0gPSBhd2FpdCBpbXBvcnQoYC4vJHtwcmVmaXh9JHtldmVudH0uanNgKTtcbiAgICBpZiAoIW1hcHBDb25mKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHJldHVybiBtYXBwQ29uZjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY29uZmlnX3R5cGUocHJlZml4OiBhbnksIGV2ZW50OiBhbnksIHR5cGU6IGFueSkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgZGVmYXVsdDogbWFwcENvbmYgfSA9IGF3YWl0IGltcG9ydChcbiAgICAgIGAuLyR7cHJlZml4fSR7ZXZlbnR9LSR7dHlwZX0uanNgXG4gICAgKTtcbiAgICBpZiAoIW1hcHBDb25mKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHJldHVybiBtYXBwQ29uZjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IjBMQUFBLElBQUFBLGVBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQSxzQkFBc0MsU0FBQUMseUJBQUFDLENBQUEsNEJBQUFDLE9BQUEsa0JBQUFDLENBQUEsT0FBQUQsT0FBQSxHQUFB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