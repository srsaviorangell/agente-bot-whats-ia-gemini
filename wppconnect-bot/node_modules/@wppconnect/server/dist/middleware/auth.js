"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;














var _bcrypt = _interopRequireDefault(require("bcrypt"));


var _sessionUtil = require("../util/sessionUtil"); /*
 * Copyright 2021 WPPConnect Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function formatSession(session) {return session.split(':')[0];}const verifyToken = (req, res, next) => {const secureToken = req.serverOptions.secretKey;const { session } = req.params;const { authorization: token } = req.headers;if (!session) return res.status(401).send({ message: 'Session not informed' });try {
    let tokenDecrypt = '';
    let sessionDecrypt = '';

    try {
      sessionDecrypt = session.split(':')[0];
      tokenDecrypt = session.
      split(':')[1].
      replace(/_/g, '/').
      replace(/-/g, '+');
    } catch (error) {
      try {
        if (token && token !== '' && token.split(' ').length > 0) {
          const token_value = token.split(' ')[1];
          if (token_value)
          tokenDecrypt = token_value.replace(/_/g, '/').replace(/-/g, '+');else

          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        } else {
          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        }
      } catch (e) {
        req.logger.error(e);
        return res.status(401).json({
          error: 'Check that a Session and Token are correct',
          message: error
        });
      }
    }

    _bcrypt.default.compare(
      sessionDecrypt + secureToken,
      tokenDecrypt,
      function (err, result) {
        if (result) {
          req.session = formatSession(req.params.session);
          req.token = tokenDecrypt;
          req.client = _sessionUtil.clientsArray[req.session];
          next();
        } else {
          return res.
          status(401).
          json({ error: 'Check that the Session and Token are correct' });
        }
      }
    );
  } catch (error) {
    req.logger.error(error);
    return res.status(401).json({
      error: 'Check that the Session and Token are correct.',
      message: error
    });
  }
};var _default = exports.default =

verifyToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmNyeXB0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc2Vzc2lvblV0aWwiLCJmb3JtYXRTZXNzaW9uIiwic2Vzc2lvbiIsInNwbGl0IiwidmVyaWZ5VG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2VjdXJlVG9rZW4iLCJzZXJ2ZXJPcHRpb25zIiwic2VjcmV0S2V5IiwicGFyYW1zIiwiYXV0aG9yaXphdGlvbiIsInRva2VuIiwiaGVhZGVycyIsInN0YXR1cyIsInNlbmQiLCJtZXNzYWdlIiwidG9rZW5EZWNyeXB0Iiwic2Vzc2lvbkRlY3J5cHQiLCJyZXBsYWNlIiwiZXJyb3IiLCJsZW5ndGgiLCJ0b2tlbl92YWx1ZSIsImpzb24iLCJlIiwibG9nZ2VyIiwiYmNyeXB0IiwiY29tcGFyZSIsImVyciIsInJlc3VsdCIsImNsaWVudCIsImNsaWVudHNBcnJheSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9hdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAyMSBXUFBDb25uZWN0IFRlYW1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcbmltcG9ydCB7IE5leHRGdW5jdGlvbiwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgY2xpZW50c0FycmF5IH0gZnJvbSAnLi4vdXRpbC9zZXNzaW9uVXRpbCc7XG5cbmZ1bmN0aW9uIGZvcm1hdFNlc3Npb24oc2Vzc2lvbjogc3RyaW5nKSB7XG4gIHJldHVybiBzZXNzaW9uLnNwbGl0KCc6JylbMF07XG59XG5cbmNvbnN0IHZlcmlmeVRva2VuID0gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogYW55ID0+IHtcbiAgY29uc3Qgc2VjdXJlVG9rZW4gPSByZXEuc2VydmVyT3B0aW9ucy5zZWNyZXRLZXk7XG5cbiAgY29uc3QgeyBzZXNzaW9uIH0gPSByZXEucGFyYW1zO1xuICBjb25zdCB7IGF1dGhvcml6YXRpb246IHRva2VuIH0gPSByZXEuaGVhZGVycztcbiAgaWYgKCFzZXNzaW9uKVxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuc2VuZCh7IG1lc3NhZ2U6ICdTZXNzaW9uIG5vdCBpbmZvcm1lZCcgfSk7XG5cbiAgdHJ5IHtcbiAgICBsZXQgdG9rZW5EZWNyeXB0ID0gJyc7XG4gICAgbGV0IHNlc3Npb25EZWNyeXB0ID0gJyc7XG5cbiAgICB0cnkge1xuICAgICAgc2Vzc2lvbkRlY3J5cHQgPSBzZXNzaW9uLnNwbGl0KCc6JylbMF07XG4gICAgICB0b2tlbkRlY3J5cHQgPSBzZXNzaW9uXG4gICAgICAgIC5zcGxpdCgnOicpWzFdXG4gICAgICAgIC5yZXBsYWNlKC9fL2csICcvJylcbiAgICAgICAgLnJlcGxhY2UoLy0vZywgJysnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRva2VuICYmIHRva2VuICE9PSAnJyAmJiB0b2tlbi5zcGxpdCgnICcpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCB0b2tlbl92YWx1ZSA9IHRva2VuLnNwbGl0KCcgJylbMV07XG4gICAgICAgICAgaWYgKHRva2VuX3ZhbHVlKVxuICAgICAgICAgICAgdG9rZW5EZWNyeXB0ID0gdG9rZW5fdmFsdWUucmVwbGFjZSgvXy9nLCAnLycpLnJlcGxhY2UoLy0vZywgJysnKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgICAgICBtZXNzYWdlOiAnVG9rZW4gaXMgbm90IHByZXNlbnQuIENoZWNrIHlvdXIgaGVhZGVyIGFuZCB0cnkgYWdhaW4nLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdUb2tlbiBpcyBub3QgcHJlc2VudC4gQ2hlY2sgeW91ciBoZWFkZXIgYW5kIHRyeSBhZ2FpbicsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVxLmxvZ2dlci5lcnJvcihlKTtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICBlcnJvcjogJ0NoZWNrIHRoYXQgYSBTZXNzaW9uIGFuZCBUb2tlbiBhcmUgY29ycmVjdCcsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3IsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGJjcnlwdC5jb21wYXJlKFxuICAgICAgc2Vzc2lvbkRlY3J5cHQgKyBzZWN1cmVUb2tlbixcbiAgICAgIHRva2VuRGVjcnlwdCxcbiAgICAgIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmVxLnNlc3Npb24gPSBmb3JtYXRTZXNzaW9uKHJlcS5wYXJhbXMuc2Vzc2lvbik7XG4gICAgICAgICAgcmVxLnRva2VuID0gdG9rZW5EZWNyeXB0O1xuICAgICAgICAgIHJlcS5jbGllbnQgPSBjbGllbnRzQXJyYXlbcmVxLnNlc3Npb25dO1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgICAgICAuc3RhdHVzKDQwMSlcbiAgICAgICAgICAgIC5qc29uKHsgZXJyb3I6ICdDaGVjayB0aGF0IHRoZSBTZXNzaW9uIGFuZCBUb2tlbiBhcmUgY29ycmVjdCcgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcS5sb2dnZXIuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICBlcnJvcjogJ0NoZWNrIHRoYXQgdGhlIFNlc3Npb24gYW5kIFRva2VuIGFyZSBjb3JyZWN0LicsXG4gICAgICBtZXNzYWdlOiBlcnJvcixcbiAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdmVyaWZ5VG9rZW47XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQWVBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTs7O0FBR0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBLHdCQUFtRCxDQWxCbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBTUEsU0FBU0UsYUFBYUEsQ0FBQ0MsT0FB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