"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _config = _interopRequireDefault(require("../../config"));
var _db = _interopRequireDefault(require("../db/redis/db"));
var _functions = require("../functions");

class RedisTokenStore {


  constructor(client) {
    this.client = client;

    let prefix = _config.default.db.redisPrefix || '';
    if (prefix === 'docker') {
      prefix = (0, _functions.getIPAddress)();
    }
  }
  tokenStore = {
    getToken: (sessionName) =>
    new Promise((resolve, reject) => {
      _db.default.get(
        this.prefix + sessionName,
        (err, reply) => {
          if (err) {
            return reject(err);
          }
          const object = JSON.parse(reply);
          if (object) {
            if (object.config && Object.keys(this.client.config).length === 0)
            this.client.config = object.config;
            if (
            object.webhook &&
            Object.keys(this.client.config).length === 0)

            this.client.config.webhook = object.webhook;
          }
          resolve(object);
        }
      );
    }),
    setToken: (sessionName, tokenData) =>
    new Promise((resolve) => {
      tokenData.sessionName = sessionName;
      tokenData.config = this.client.config;
      _db.default.set(
        this.prefix + sessionName,
        JSON.stringify(tokenData),
        (err) => {
          return resolve(err ? false : true);
        }
      );
    }),
    removeToken: (sessionName) =>
    new Promise((resolve) => {
      _db.default.del(this.prefix + sessionName, (err) => {
        return resolve(err ? false : true);
      });
    }),
    listTokens: () =>
    new Promise((resolve) => {
      _db.default.keys(this.prefix + '*', (err, keys) => {
        if (err) {
          return resolve([]);
        }
        keys.forEach((item, indice) => {
          if (this.prefix !== '' && item.includes(this.prefix)) {
            keys[indice] = item.substring(
              item.indexOf(this.prefix) + this.prefix.length
            );
          }
        });
        return resolve(keys);
      });
    })
  };
}var _default = exports.default =

RedisTokenStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZGIiLCJfZnVuY3Rpb25zIiwiUmVkaXNUb2tlblN0b3JlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJwcmVmaXgiLCJjb25maWciLCJkYiIsInJlZGlzUHJlZml4IiwiZ2V0SVBBZGRyZXNzIiwidG9rZW5TdG9yZSIsImdldFRva2VuIiwic2Vzc2lvbk5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlZGlzQ2xpZW50IiwiZ2V0IiwiZXJyIiwicmVwbHkiLCJvYmplY3QiLCJKU09OIiwicGFyc2UiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwid2ViaG9vayIsInNldFRva2VuIiwidG9rZW5EYXRhIiwic2V0Iiwic3RyaW5naWZ5IiwicmVtb3ZlVG9rZW4iLCJkZWwiLCJsaXN0VG9rZW5zIiwiZm9yRWFjaCIsIml0ZW0iLCJpbmRpY2UiLCJpbmNsdWRlcyIsInN1YnN0cmluZyIsImluZGV4T2YiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWwvdG9rZW5TdG9yZS9yZWRpc1Rva2VuU3RvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHJlZGlzQ2xpZW50IGZyb20gJy4uL2RiL3JlZGlzL2RiJztcbmltcG9ydCB7IGdldElQQWRkcmVzcyB9IGZyb20gJy4uL2Z1bmN0aW9ucyc7XG5cbmNsYXNzIFJlZGlzVG9rZW5TdG9yZSB7XG4gIGRlY2xhcmUgY2xpZW50OiBhbnk7XG4gIGRlY2xhcmUgcHJlZml4OiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKGNsaWVudDogYW55KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG5cbiAgICBsZXQgcHJlZml4ID0gY29uZmlnLmRiLnJlZGlzUHJlZml4IHx8ICcnO1xuICAgIGlmIChwcmVmaXggPT09ICdkb2NrZXInKSB7XG4gICAgICBwcmVmaXggPSBnZXRJUEFkZHJlc3MoKTtcbiAgICB9XG4gIH1cbiAgdG9rZW5TdG9yZSA9IHtcbiAgICBnZXRUb2tlbjogKHNlc3Npb25OYW1lOiBzdHJpbmcpID0+XG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIChyZWRpc0NsaWVudCBhcyBhbnkpLmdldChcbiAgICAgICAgICB0aGlzLnByZWZpeCArIHNlc3Npb25OYW1lLFxuICAgICAgICAgIChlcnI6IGFueSwgcmVwbHk6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvYmplY3QgPSBKU09OLnBhcnNlKHJlcGx5KTtcbiAgICAgICAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgICAgICAgaWYgKG9iamVjdC5jb25maWcgJiYgT2JqZWN0LmtleXModGhpcy5jbGllbnQuY29uZmlnKS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuY29uZmlnID0gb2JqZWN0LmNvbmZpZztcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG9iamVjdC53ZWJob29rICYmXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jbGllbnQuY29uZmlnKS5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50LmNvbmZpZy53ZWJob29rID0gb2JqZWN0LndlYmhvb2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKG9iamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgc2V0VG9rZW46IChzZXNzaW9uTmFtZTogc3RyaW5nLCB0b2tlbkRhdGE6IGFueSkgPT5cbiAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRva2VuRGF0YS5zZXNzaW9uTmFtZSA9IHNlc3Npb25OYW1lO1xuICAgICAgICB0b2tlbkRhdGEuY29uZmlnID0gdGhpcy5jbGllbnQuY29uZmlnO1xuICAgICAgICAocmVkaXNDbGllbnQgYXMgYW55KS5zZXQoXG4gICAgICAgICAgdGhpcy5wcmVmaXggKyBzZXNzaW9uTmFtZSxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh0b2tlbkRhdGEpLFxuICAgICAgICAgIChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZXJyID8gZmFsc2UgOiB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KSxcbiAgICByZW1vdmVUb2tlbjogKHNlc3Npb25OYW1lOiBzdHJpbmcpID0+XG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAocmVkaXNDbGllbnQgYXMgYW55KS5kZWwodGhpcy5wcmVmaXggKyBzZXNzaW9uTmFtZSwgKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZXJyID8gZmFsc2UgOiB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICBsaXN0VG9rZW5zOiAoKSA9PlxuICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgKHJlZGlzQ2xpZW50IGFzIGFueSkua2V5cyh0aGlzLnByZWZpeCArICcqJywgKGVycjogYW55LCBrZXlzOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShbXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleXMuZm9yRWFjaCgoaXRlbTogYW55LCBpbmRpY2U6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJlZml4ICE9PSAnJyAmJiBpdGVtLmluY2x1ZGVzKHRoaXMucHJlZml4KSkge1xuICAgICAgICAgICAgICBrZXlzW2luZGljZV0gPSBpdGVtLnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICBpdGVtLmluZGV4T2YodGhpcy5wcmVmaXgpICsgdGhpcy5wcmVmaXgubGVuZ3RoXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoa2V5cyk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlzVG9rZW5TdG9yZTtcbiJdLCJtYXBwaW5ncyI6InlMQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFVBQUEsR0FBQUYsT0FBQTs7QUFFQSxNQUFNRyxlQUFlLENBQUM7OztFQUdwQkMsV0FBV0EsQ0FBQ0MsTUFBVyxFQUFFO0lBQ3ZCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNOztJQUVwQixJQUFJQyxNQUFNLEdBQUdDLGVBQU0sQ0FBQ0MsRUFBRSxDQUFDQyxXQUFXLElBQUksRUFBRTtJQUN4QyxJQUFJSCxNQUFNLEtBQUssUUFBUSxFQUFFO01BQ3ZCQSxNQUFNLEdBQUcsSUFBQUksdUJBQVksRUFBQyxDQUFDO0lBQ3pCO0VBQ0Y7RUFDQUMsVUFBVSxHQUFHO0lBQ1hDLFFBQVEsRUFBRUEsQ0FBQ0MsV0FBbUI7SUFDNUIsSUFBSUMsT0FBTyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO01BQzlCQyxXQUFXLENBQVNDLEdBQUc7UUFDdEIsSUFBSSxDQUFDWixNQUFNLEdBQUdPLFdBQVc7UUFDekIsQ0FBQ00sR0FBUSxFQUFFQyxLQUFVLEtBQUs7VUFDeEIsSUFBSUQsR0FBRyxFQUFFO1lBQ1AsT0FBT0gsTUFBTSxDQUFDRyxHQUFHLENBQUM7VUFDcEI7VUFDQSxNQUFNRSxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDSCxL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